* Q. 計算點數 (Counting Points)
  :PROPERTIES:
  :CATEGORY: computational geometry
  :END:

** 描述
   在一個 2D 平面上，有 \(n\) 個圓，它們的圓心都在 x 軸上，座標為 \((x_i, 0)\)。
   您的任務是計算這些圓所覆蓋的整數點的數量（包含在圓邊界上的點）。
   此外，所有圓的半徑總和為 \(m\)。

** 輸入格式
   第一行包含兩個整數 \(n\) 和 \(m\)。
   第二行包含 \(n\) 個整數 \(x_1, x_2, ..., x_n\)，代表各圓的圓心 x 座標。
   第三行包含 \(n\) 個整數 \(r_1, r_2, ..., r_n\)，代表各圓的半徑。

** 輸出格式
   輸出一行，包含一個整數，代表這些圓所覆蓋的點的總數。

** 技術規格
   - \(1 \le n \le 10^6\)
   - \(1 \le m \le 10^6\)
   - \(-10^9 \le x_i \le 10^9\)
   - \(1 \le r_i, \sum^n_{i=1}{r_i}=m\)

** 範例測試案例
   [[https://drive.google.com/open?id=1QMGRiN1vE-GmmN0Y2SHXpLbR1kF46a3U][Sample Test Cases]]
** in
   #+begin_example
2 3
0 0
1 2
   #+end_example
** out

#+begin_example
13

#+end_example



** in
   #+begin_example
2 6
0 4
3 3

   #+end_example
** out

#+begin_example
51

#+end_example


* R. 背包問題 (Knapsack Problem)
  :PROPERTIES:
  :URL: https://open.kattis.com/problems/pokemongogo
  :END:

** 描述
   您有 \(N\) 個物品，每個物品都有一個特定的重量 \(w_i\) 和價值 \(v_i\)，以及一個最多能承載 \(C\) 單位重量的背包。請決定哪些物品應該放入背包，以便在不超過重量限制的情況下，最大化總價值。

** 輸入格式
   第一行包含兩個整數，\(N\) 和 \(C\)，分別代表物品數量和背包容量。
   接下來的 \(N\) 行，每行包含兩個整數 \(w_i\) 和 \(v_i\)，代表第 \(i\) 個物品的重量和價值。

** 輸出格式
   輸出一個整數，代表您可以達成的最大總價值。

** 技術規格
   - \(1 \leq N \leq 20\)
   - \(1 \leq C \leq 10^{18}\)
   - \(1 \leq w_i, v_i \leq 10^{16}\)

** 範例測試案例
   [[https://drive.google.com/open?id=1eVtX87aUH03vc7mZ_ez5EpMDQVeWJ2hr][Sample Test Cases]]
** in
#+begin_example
3 10
4 5
1 2
6 1

#+end_example
** out
#+begin_example
7
#+end_example



* S. 尖尖三角形
  :PROPERTIES:
  :URL: https://open.kattis.com/problems/convexhull
  :END:

** 描述
   在二維平面上，給 \(n\) 個點。相信大家在作業都有求出凸包，對吧？
   但是在這一題，凸包的定義稍微修改了，定義如果凸包上有一條邊包含了兩個以上的點（也就是存在至少三點共線），那麼所有在這條邊上的點都在凸包裡。（原本的凸包不能存在三點共線）

   接下來，我們只想要保留上凸包。上凸包是什麼呢？ 我們把凸包分成上下兩部分：上凸包和下凸包，以極左和極右點分割（極左跟極右點都屬於上凸包）。**這題的測資特別保證極左跟極右點分別只會有一個。**

   可是單單求出上凸包太輕鬆了，所以這題沒有那麼簡單。
   我們定義：如果有一個三角形的三個點的座標為 \((x1, y1), (x2, y2), (x3, y3)\)，其中 \(x1 < x2 < x3\)，那麼如果滿足 \(y2 > y1\) 以及 \(y2 > y3\)，那我們稱這個三角形為**尖尖三角形**。
   現在想要問你，在那個上凸包的那些點中，所有尖尖三角形的面積總和。

   因為答案可能會很大，所以答案請 \(mod\ 10^9 + 7\)。
   可以證明，答案可以被表示成最簡分數 \(\frac{p}{q}\)，那你只要輸出一個 \(x, x \in [0, M)\)，使得 \(x \cdot q \equiv p \pmod{10^9 + 7}\)。

** 輸入格式
   第一行有一個整數 \(N\)。
   接下來有 \(N\) 行，每行有兩個整數 \(x_i, y_i\)，代表二維平面上的一個點。

** 輸出格式
   第一行請輸出一個整數 \(K\)，代表上凸包有多少個點。
   接下來輸出 \(K\) 行，按照 \(x_i\) 遞增的順序輸出所有上凸包上的點。
   接下來一行請輸出題目要求的面積。

** 技術規格
   - \(3 \le N \le 2 \cdot 10^5\)
   - \(-10^9 \le x_i, y_i \le 10^9\)

** 範例測試案例
   [[https://drive.google.com/open?id=1EQDR4gYfQsZujrUH6cQGkDSBVV2Z6Evy][Sample Test Cases]]
** in
#+begin_example
6
1 1
2 3
3 5
4 3
5 1
3 3
#+end_example
** out
#+begin_example
5
1 1
2 3
3 5
4 3
5 1
26
#+end_example

** in
#+begin_example
6
-3 3
-4 2
-5 4
-2 2
-1 0
-3 0

#+end_example

** out
#+begin_example
4
-5 4
-3 3
-2 2
-1 0
0

#+end_example




* T. 複合函數 (Composite Function)
  :PROPERTIES:
  :URL: https://open.kattis.com/problems/knapsack; 費式數列
  :END:

** 描述
   給定兩個函數 \(f(x) = 2x + 1\) 和 \(g(x) = 4x\)，其中 \(x\) 為非負整數。令 \(S\) 為所有正整數的集合，這些正整數可以透過從 \(0\) 開始，並以任意順序應用 \(f\) 和 \(g\) 的序列來獲得（可能不使用其中一個函數）。

   例如，\(19 \in S\)，因為 \(f(f(g(f(0)))) = f(f(g(1))) = f(f(4)) = f(9) = 19\)。

   找出集合 \(S\) 中嚴格小於 \(2^N\) 的元素數量。將結果取模 \(10^9 + 7\) 輸出。

** 輸入格式
   一個非負整數 \(N\)，代表上界 \(2^N\)。

** 輸出格式
   輸出 \(S\) 中小於 \(2^N\) 的元素數量，取模 \(10^9 + 7\)。

** 技術規格
   - \(0 \leq N \leq 10^{18}\)

** 範例測試案例
[[https://drive.google.com/open?id=1QmD9gl4ailT1RCxmFVqFZDpOwP_Pv-iX][Sample Test Cases]]
** in
#+begin_example
5
#+end_example
** out
#+begin_example
12
#+end_example
** in
#+begin_example
0
#+end_example

** out
#+begin_example
0
#+end_example

** in
#+begin_example
10
#+end_example

** out

#+begin_example
143
#+end_example




* U. 環校路跑
  :PROPERTIES:
  :URL: https://open.kattis.com/problems/knapsack
  :END:

** 描述
   為了鼓勵學生參與校園環校路跑活動，NYCU 體育組計畫在跑道沿線共設置 \(N\) 處補給站，編號依次為 \(1, 2, \dots, N\)，且站點互為環狀相連（第 \(N\) 處與第 \(1\) 處視為相鄰）。每個補給站 \(i\) 都有一項「補給效用值」 \(A_i\)，效用值可正可負，表示該站點為跑者帶來的正面或負面影響。

   體育組需要 **恰好** 在這 \(N\) 處站點中選擇 \(K = \lfloor N/2 \rfloor\) 處作為正式補給站，但有下列限制：

   1. 任意兩個被選站點在環上不可相鄰（以避免能量補給過度集中）。
   2. 目標是使所選站點的補給效用值總和 **最大化**。

** 輸入格式
   - 第一行：整數 \(N\) — 補給站總數。
   - 第二行：\(N\) 個整數 \(A_i\) — 編號 \(i\) 的補給站效用值；\(|A_i| \le 10^9\)。

** 輸出格式
   輸出一行，為在滿足恰選 \(\lfloor N/2 \rfloor\) 個且不相鄰條件下，可達到的最大效用值總和。

** 技術規格
   - \(2 \le N \le 2 \times 10^5\)
   - \(|A_i| \le 10^9\)
   - 補給站環狀相鄰：站點 \(N\) 與 \(1\) 視為相鄰。

** 範例測試案例
[[https://drive.google.com/open?id=1MmBIaXFxVgqYKL79Yl_uw-4xFC6XeQqP][Sample Test Cases]]
** in
#+begin_example
5
3 -1 2 4 1
#+end_example
** out
#+begin_example
7
#+end_example


* V. 加權遞增照片 (Weighted Ascending Photo)
  :PROPERTIES:
  :URL: https://open.kattis.com/contests/rsp7r9/problems/increasingsubsequence; https://open.kattis.com/contests/rsp7r9/problems/knapsack
  :END:

** 描述
   期末考後，老師請所有學生留在舞台上拍紀念照。\(N\) 位學生站成固定的一排（索引從 1 到 \(N\)）。第 \(i\) 位學生的身高為 \(H_i\)，體重為 \(W_i\)。舞台最多能支撐總重 \(W\) 公斤。
   我們想要從這些學生中選出一個子序列，使得：
   1. 他們的身高嚴格遞增。
   2. 他們的體重總和不超過 \(W\)。
   我們最多可以包含多少位學生？

** 輸入格式
   第一行包含兩個整數 \(N\) 和 \(W\)。
   第二行包含 \(N\) 個整數 \(H_i\)，代表第 \(i\) 位學生的身高。
   第三行包含 \(N\) 個整數 \(W_i\)，代表第 \(i\) 位學生的體重。

** 輸出格式
   輸出一個整數 \(X\)，代表我們可以達成的身高遞增子序列的最大長度。

** 技術規格
   - \(0 \le N \le 600\)
   - \(0 < H_i, W_i, W \le 10^9\)

** 範例測試案例
   [[https://drive.google.com/open?id=1agHQ3L-m4Rde4qkzqd2FFqMKc3KnJcFr][Sample Test Cases]]
** in
#+begin_example
5 10
1 3 2 4 5
3 1 2 5 1
#+end_example
** out
#+begin_example
4

#+end_example



* W. Peppa 的征服 (Peppa’s Conquest)
  :PROPERTIES:
  :URL: https://open.kattis.com/problems/rootedsubtrees
  :END:

** 描述
   Peppa 最近迷上了一款王國遊戲。為了登上排行榜榜首，他想以最低的成本征服整個王國（即佔領所有城鎮）。征服每個城鎮的成本等於其人口。由於王國的結構複雜，Peppa 將問題簡化為將王國建模為一棵 **樹**。
   （**注意：每個城鎮可以被征服多次。**）

   給定 \(n\) 個城鎮和 \(n-1\) 條道路，以及每個城鎮的人口，Peppa 有兩種操作來征服城鎮：

   1. 選擇兩個不同的城鎮 \(u\) 和 \(v\) (\(u \neq v\))。Peppa 支付
      \begin{align*}
      a_u + a_v
      \end{align*}
      的成本來征服 \(u\) 和 \(v\) 之間唯一簡單路徑上的所有城鎮（包括 \(u\) 和 \(v\)）。

   2. 選擇一個城鎮 \(u\)。Peppa 支付
      \begin{align*}
      k \times a_u
      \end{align*}
      的成本來征服城鎮 \(u\)。

   設計一個高效的演算法來計算 Peppa 征服樹中所有城鎮所需的最低總成本，並輸出該成本。

** 輸入格式
   #+BEGIN_EXAMPLE
   n k
   a_1 a_2 … a_n
   u_1 v_1
   u_2 v_2
   …
   u_{n-1} v_{n-1}
   #+END_EXAMPLE
   - 第一行包含整數 \(n\) 和 \(k\)。
   - 第二行包含 \(n\) 個整數 \(a_1, a_2, \dots, a_n\)，其中 \(a_i\) 是城鎮 \(i\) 的人口。
   - 接下來的 \(n-1\) 行，每行包含兩個整數 \(u_i\) 和 \(v_i\)，表示城鎮 \(u_i\) 和 \(v_i\) 之間有一條道路 (\(u_i \neq v_i\))。

** 輸出格式
   一個整數：Peppa 征服樹中所有城鎮所需的最低總成本。

** 技術規格
   - \(1 \le n \le 10^5\)
   - \(2 \le k \le 10^9\)
   - \(1 \le a_i \le 10^3\)
   - \(1 \le u_i \le n, 1 \le v_i \le n\)

** 範例測試案例
   [[https://drive.google.com/open?id=1iLEFvv52uEEkrV326-CziDqWUwTQdgV2][Sample Test Cases]]

** in
#+begin_example
3 2
1 2 3
1 2
2 3
#+end_example

** out
#+begin_example
4
#+end_example

* X. 可憐的威廉 (Poor William)
  :PROPERTIES:
  :CATEGORY: computational geometry
  :END:

** 描述
   威廉是國立陽明交通大學 (NYCU) 雞程式設計一 (CP1) 課程的學生，大約一個半月前，他為課程中的一個問題所困擾。作為上學期獲得總統獎並在本學期修了 34 個學分的學霸，他努力學習並成功克服了那個問題，現在正瞄準另一個獎項。

   解決了上一堂課那個傷腦筋的問題後，威廉決定開車兜風，欣賞 NYCU 的美景。但當他在工程三館旁的路上行駛時，不幸被一輛卡車撞到，轉生到了異世界。這個異世界叫做「Lane-so-kyo」，顧名思義，這裡到處都是道路。而且因為這是異世界，所有的道路都有無限長。

   **此外，如果我們將 Lane-so-kyo 視為一個座標系，這裡有 \(n\) 條無限長的道路，可以表示為 \(y=ax+b\)。**

   威廉從夢境般的昏迷中醒來後，他想知道自己是不是死了，然後他被 Lane-so-kyo 的非凡景色所驚豔。因為威廉來這裡之前正在開車，所以他轉生成了一輛豐田 AE86，而且故事的主角總是有魔法力量，在這種情況下，威廉獲得了傳送到這個座標系上任何有限點的能力。他現在想繼續欣賞風景。

   隨著他開車，時間流逝，但當他開得越來越遠，時間似乎並沒有流逝，感覺像是永恆，這不僅僅是因為 Lane-so-kyo 有無限長的道路，也因為這裡有無限的時間。所以即使威廉開了很久，他仍然將以無限的時間駛過所有這些無限長的道路。

   **開了一段時間後，威廉確信他走遍了每條道路的每個部分，他發現了一些有趣的事情，每條道路都只塗了一種顏色，他還注意到，每當他在一個十字路口（一個有限點）從一條道路轉向另一條道路（不包括直行和 U 型轉彎）時，兩條道路的顏色都不同。**

   炳華是威廉的朋友，他不知道威廉意外身亡，那天他打算凌晨 3 點睡覺，他一睡著，一輛車就出現在他的夢裡。那輛車說：「嘿，炳華，你需要幫我。我是來自異世界的威廉，你必須幫我計算這個地方有多少種道路顏色，我想這是讓我逃離這個異世界，回到地球的唯一方法……」。在與 AE86 威廉交談後，炳華明白了他必須做什麼才能救回威廉。

   **根據威廉在兩個段落前發現的有趣事實，炳華必須用一種顏色繪製每條道路，並且必須使用盡可能少的顏色。但炳華正忙於訓練他的人工智能，沒有時間處理這個問題，你能幫助炳華回答這個問題，以便他能成功地將威廉帶回偉大的 NYCU 嗎？**

** 輸入格式
   第一行包含一個整數 \(n\) (\(1 \le n \le 2 \times 10^5\)) — Lane-so-kyo 中的道路數量。
   接下來的 \(n\) 行中的第 \(i\) 行包含兩個整數 \(a_i\) 和 \(b_i\) (\(-10^9 \le a_i, b_i \le 10^9\)) — 第 \(i\) 條道路可以表示為 \(y = a_ix + b_i\)。

** 輸出格式
   第一行，輸出一個整數 \(k\)，表示使用的顏色數量，\(k\) 必須是所需的最少顏色數量。
   第二行，輸出 \(n\) 個整數 \(c_1, c_2, \dots, c_n\) (\(0 \le c_i < k\))，其中 \(c_i\) 表示第 \(i\) 條道路的顏色。
   如果有多個解，請輸出字典序最小的解。

** 技術規格
   - \(1 \le n \le 2 \times 10^5\)
   - \(-10^9 \le a_i, b_i \le 10^9\)
   - \(0 \le c_i < k\)
   - 所有變數 \(\in \mathbb{Z}\)

** 範例測試案例
   [[https://drive.google.com/open?id=1xuxmMEGYQKiehMbneFSHVYwngIRLh00t][Sample Test Cases]]
** in
#+begin_example
3
1 0
-1 0
0 1
#+end_example


** out
#+begin_example
3
0 1 2
#+end_example
** in
#+begin_example
4
1 5
-1 5
1 -5
-1 -5
#+end_example

** out
#+begin_example
2
0 1 0 1
#+end_example




* Y. Mikaneko 咖啡廳 (Mikaneko Cafe)
  :PROPERTIES:
  :CATEGORY: 動態規劃
  :END:

** 描述
   Mikaneko 是日本一位著名的 Vtuber，最近在台北開了一家咖啡廳。由於她的人氣非常高，自開幕以來每天都座無虛席。

   Chris 是 Mikaneko 的忠實粉絲，自從另一位 Vtuber Rashia 從 hololive production 畢業後就一直關注她，聽說這家咖啡廳後，他渴望能去參觀。在一個陽光明媚、微風和煦的美好星期五，他抵達台北並參觀了傳說中的 Mikaneko 咖啡廳，不幸的是座位都滿了，他必須等待大約 2 小時才能用餐。

   **在等待的時候，他發現在咖啡廳的吧檯有一排 \(n\) 個座位，每個座位上都坐著一個人。此外，他注意到坐在第 \(i\) 個座位上的人的好感度為 \(a_i\)。**

   由於 Mikaneko 的一些粉絲是反向粉絲，而且大多數粉絲都不理性，一個人的好感度可能是非正數，吧檯的粉絲如果發現其他人對 Mikaneko 的關注程度與自己不同，就會不開心。

   **由於 Chris 是個愛好和平的人，他想將吧檯的人分成恰好 \(k\) 個非空的區段，每個區段的好感度總和相同。這樣，他們就不會再爭吵了。為了做到這一點，他想知道有多少種不同的分法。如果至少有一個位置的分組不同，則認為兩種分法是不同的。**

   但 Chris 正忙著看 Mococo Abyssgard 的直播，沒有時間處理這個問題，你能幫助 Chris 回答這個問題，讓他成功地讓 Mikaneko 咖啡廳保持和平嗎？

** 輸入格式
   第一行包含一個整數 \(t\) (\(1 \le t \le 10\)) — 測試案例的數量。
   每個測試案例的第一行包含兩個整數 \(n\) 和 \(k\) (\(1 \le n \le 10^4, 1 \le k \le 10^2\)) — 吧檯的人數和 Chris 想要分成的區段數量。
   每個測試案例的第二行包含 \(n\) 個整數 \(a_1, a_2, \dots, a_n\) (\(-10^9 \le a_i \le 10^9\)) — 坐在第 \(i\) 個座位上的人的好感度。

** 輸出格式
   對於每個測試案例，輸出一行，包含一個數字 \(ans\)，表示將人們分成恰好 \(k\) 個非空區段，且每個區段的好感度總和相同的方式數量。
   如果至少有一個位置的分組不同，則認為兩種分法是不同的。答案應取模 \(10^9 + 7\)。

** 技術規格
   - \(1 \le t \le 10\)
   - \(1 \le n \le 10^4\)
   - \(1 \le k \le 10^2\)
   - \(-10^9 \le a_i \le 10^9\)

** 範例測試案例
   [[https://drive.google.com/open?id=1agZDXkfAssT8MOOzNOWZuB48KTIqyt6x][Sample Test Cases]]
** in
#+begin_example
5
5 3
1 2 3 0 3
5 4
0 0 0 0 0
5 5
1 1 1 1 0
5 2
1 2 3 4 -4
5 2
1 2 -3 4 -4
#+end_example

** out
#+begin_example
2
4
0
1
1
#+end_example


* Z. 破碎的邦多利 (The Broken Bandori)
  :PROPERTIES:
  :CATEGORY: tarjan scc + 樹DP
  :URL: https://open.kattis.com/problems/britishmenu
  :END:

** 描述
   Sakiko 的樂團 **AbeMujia** 曾是這座城市最有前途的音樂團體。它由五位古怪但形影不離的成員組成：**Sakiko**，喜怒無常的鍵盤手；**Hatsune**，對 Sakiko 深深著迷的熱情主唱；**Umiri**，渴望被信任的神秘貝斯手；**Mutsumi**，偶爾會變出袋裝小黃瓜的安靜吉他手；**Nyamu**，可愛的鼓手。

   他們的旅程一直很坎坷。Mutsumi 是 Sakiko 的兒時玩伴，開始孤立自己，並因解離症發作而試圖聯繫醫生。Hatsune 對 Sakiko 的愛激發了強烈而迴響的歌詞，但她對「被聽見」的執著常常讓她在排練時壓過別人。Umiri 開始為每個人買衣服，以拉近距離並建立信任，但這一舉動讓一些人感到不適。Nyamu 只想直播可愛和吃草莓。儘管他們有衝突，但他們仍然透過個人情感、誤解和混亂的群聊聯繫在一起。

   現在，他們正計劃在再次解散前進行最後一次巡迴演唱會。Sakiko 從戶川家族中挑選了 \(N\) 名成員來幫助他們完成最後的演唱會。戶川家族是一個大家族，每天都有很多政治鬥爭。因此，成員之間存在一些依賴關係和規則。例如：如果 \(v\) 依賴於 \(u\)，而你選擇了 \(u\) 作為工作人員，則不能選擇 \(v\)，以防止秘密協議。戶川集團的統治者戶川貞治表示，只能有一個工作人員不依賴任何人，並且該工作人員應編號為 1，且沒有成員 **直接** 依賴於自己。

   每個成員被選中時都有一個 **個人表現值**（基於他們音樂的情感力量和能力）。此外，如果一個成員間接依賴於自己，那麼依賴鏈上的那些人將形成一個信任團體。選擇同一個團體中的任何人只會提供 \(k\) 的表現值，無論你選擇多少人。選擇團體中的一個成員也將被視為該團體中的所有成員都被選中。最後，Sakiko 決定簡化問題，每個成員或成員組最多只依賴於一個成員或另一個組。給定依賴關係和每個成員的表現值，**找出在尊重情感約束的情況下可以實現的最大總表現值**：

   - 如果你選擇了一個成員，你 **不能** 選擇任何他們可以 **透過依賴關係直接到達** 的人（即任何依賴於他們的人）。
   - 如果 \(v\) 依賴於 \(u\)，\(w\) 依賴於 \(v\)，而 \(u\) 依賴於 \(w\) (\(u \to v \to w \to u\))，那麼選擇 \(u\) 將給你 \(k\) 的價值，並且所有依賴於 \(u, v, w\) 的其他成員都不能被選擇，因為該團體中的所有成員都被視為已被選擇。
   - 每個成員或成員組最多只依賴於一個組或成員。

** 輸入格式
   #+BEGIN_EXAMPLE
   N M
   k
   a_1
   a_2
   ...
   a_n
   u_1 v_1
   u_2 v_2
   ...
   u_m v_m
   #+END_EXAMPLE
   - \(N\)：成員數量
   - \(M\)：依賴關係數量
   - \(k\)：一個團體的表現值
   - \(a_i\)：成員 \(i\) 的表現值
   - 每行 \(u_i\ v_i\) 表示 **成員 \(v_i\) 依賴於成員 \(u_i\)**。

** 輸出格式
   一個整數：可獲得的最大總表現值。

** 技術規格
   - \(1 \le N \le 10^5\)
   - \(0 \le M \le 2 \times 10^5\)
   - \(0 \le k \le 10^9\)
   - \(0 \le a_i \le 10^9\)
   - \(1 \le u_i, v_i \le N\), \(u_i \ne v_i\), \(\{u_i, v_i\} \ne \{u_j, v_j\}\) 對於所有 \(i \ne j, i, j \le N\)。

** 範例測試案例
   [[https://drive.google.com/open?id=1PKoKv-3AwnqnycKOHQDFkI2YABcvfHU6][Sample Test Cases]]
** in
#+begin_example
3 2
1000
10
20
5
1 2
1 3
#+end_example

** out
#+begin_example
0

#+end_example

** in
#+begin_example
5 4
100000
1 1 2 1 1
1 3
1 2
2 5
2 4
#+end_example

** out
#+begin_example
25
#+end_example
